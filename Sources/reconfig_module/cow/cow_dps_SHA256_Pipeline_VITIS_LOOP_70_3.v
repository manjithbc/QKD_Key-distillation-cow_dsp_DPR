// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cow_dps_SHA256_Pipeline_VITIS_LOOP_70_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        W_address0,
        W_ce0,
        W_we0,
        W_d0,
        W_q0,
        W_address1,
        W_ce1,
        W_q1,
        W_address2,
        W_ce2,
        W_q2
);

parameter    ap_ST_fsm_pp0_stage0 = 2'd1;
parameter    ap_ST_fsm_pp0_stage1 = 2'd2;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] W_address0;
output   W_ce0;
output   W_we0;
output  [31:0] W_d0;
input  [31:0] W_q0;
output  [5:0] W_address1;
output   W_ce1;
input  [31:0] W_q1;
output  [5:0] W_address2;
output   W_ce2;
input  [31:0] W_q2;

reg ap_idle;
reg[5:0] W_address0;
reg W_ce0;
reg W_we0;
reg[5:0] W_address1;
reg W_ce1;
reg W_ce2;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state4_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln70_reg_371;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [6:0] t_reg_366;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [6:0] t_reg_366_pp0_iter1_reg;
wire   [0:0] icmp_ln70_fu_135_p2;
wire   [5:0] trunc_ln70_fu_141_p1;
reg   [5:0] trunc_ln70_reg_375;
reg   [31:0] W_load_reg_395;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] add_ln74_3_fu_339_p2;
reg   [31:0] add_ln74_3_reg_405;
wire   [31:0] add_ln74_4_fu_350_p2;
reg   [31:0] add_ln74_4_reg_410;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln72_fu_151_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln73_fu_162_p1;
wire   [63:0] zext_ln74_fu_173_p1;
wire   [63:0] zext_ln74_1_fu_278_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln70_fu_355_p1;
reg   [6:0] t_2_fu_70;
wire   [6:0] t_3_fu_178_p2;
wire    ap_loop_init;
reg   [6:0] ap_sig_allocacmp_t;
wire   [5:0] add_ln72_fu_145_p2;
wire   [5:0] add_ln73_fu_156_p2;
wire   [5:0] add_ln74_fu_167_p2;
wire   [28:0] lshr_ln1_fu_217_p4;
wire   [21:0] lshr_ln2_fu_259_p4;
wire   [5:0] add_ln74_1_fu_273_p2;
wire   [6:0] trunc_ln35_fu_199_p1;
wire   [24:0] lshr_ln_fu_189_p4;
wire   [17:0] trunc_ln35_6_fu_213_p1;
wire   [13:0] lshr_ln35_1_fu_203_p4;
wire   [16:0] trunc_ln35_7_fu_241_p1;
wire   [14:0] lshr_ln35_2_fu_231_p4;
wire   [18:0] trunc_ln35_8_fu_255_p1;
wire   [12:0] lshr_ln35_3_fu_245_p4;
wire   [31:0] zext_ln72_1_fu_227_p1;
wire   [31:0] or_ln74_1_fu_291_p3;
wire   [31:0] xor_ln74_fu_315_p2;
wire   [31:0] or_ln_fu_283_p3;
wire   [31:0] zext_ln73_1_fu_269_p1;
wire   [31:0] or_ln74_3_fu_307_p3;
wire   [31:0] xor_ln74_2_fu_327_p2;
wire   [31:0] or_ln74_2_fu_299_p3;
wire   [31:0] xor_ln74_1_fu_321_p2;
wire   [31:0] xor_ln74_3_fu_333_p2;
wire   [31:0] add_ln74_2_fu_345_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [1:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

cow_dps_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln70_fu_135_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            t_2_fu_70 <= t_3_fu_178_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            t_2_fu_70 <= 7'd16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_371 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        W_load_reg_395 <= W_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_reg_371 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln74_3_reg_405 <= add_ln74_3_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln74_4_reg_410 <= add_ln74_4_fu_350_p2;
        icmp_ln70_reg_371 <= icmp_ln70_fu_135_p2;
        t_reg_366 <= ap_sig_allocacmp_t;
        t_reg_366_pp0_iter1_reg <= t_reg_366;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln70_fu_135_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        trunc_ln70_reg_375 <= trunc_ln70_fu_141_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        W_address0 = zext_ln70_fu_355_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_address0 = zext_ln74_fu_173_p1;
    end else begin
        W_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            W_address1 = zext_ln74_1_fu_278_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            W_address1 = zext_ln73_fu_162_p1;
        end else begin
            W_address1 = 'bx;
        end
    end else begin
        W_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        W_ce0 = 1'b1;
    end else begin
        W_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        W_ce1 = 1'b1;
    end else begin
        W_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_ce2 = 1'b1;
    end else begin
        W_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        W_we0 = 1'b1;
    end else begin
        W_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln70_reg_371 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t = 7'd16;
    end else begin
        ap_sig_allocacmp_t = t_2_fu_70;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W_address2 = zext_ln72_fu_151_p1;

assign W_d0 = add_ln74_4_reg_410;

assign add_ln72_fu_145_p2 = ($signed(trunc_ln70_fu_141_p1) + $signed(6'd49));

assign add_ln73_fu_156_p2 = ($signed(trunc_ln70_fu_141_p1) + $signed(6'd62));

assign add_ln74_1_fu_273_p2 = ($signed(trunc_ln70_reg_375) + $signed(6'd57));

assign add_ln74_2_fu_345_p2 = (W_load_reg_395 + W_q1);

assign add_ln74_3_fu_339_p2 = (xor_ln74_1_fu_321_p2 + xor_ln74_3_fu_333_p2);

assign add_ln74_4_fu_350_p2 = (add_ln74_3_reg_405 + add_ln74_2_fu_345_p2);

assign add_ln74_fu_167_p2 = ($signed(trunc_ln70_fu_141_p1) + $signed(6'd48));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign icmp_ln70_fu_135_p2 = ((ap_sig_allocacmp_t == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln1_fu_217_p4 = {{W_q2[31:3]}};

assign lshr_ln2_fu_259_p4 = {{W_q1[31:10]}};

assign lshr_ln35_1_fu_203_p4 = {{W_q2[31:18]}};

assign lshr_ln35_2_fu_231_p4 = {{W_q1[31:17]}};

assign lshr_ln35_3_fu_245_p4 = {{W_q1[31:19]}};

assign lshr_ln_fu_189_p4 = {{W_q2[31:7]}};

assign or_ln74_1_fu_291_p3 = {{trunc_ln35_6_fu_213_p1}, {lshr_ln35_1_fu_203_p4}};

assign or_ln74_2_fu_299_p3 = {{trunc_ln35_7_fu_241_p1}, {lshr_ln35_2_fu_231_p4}};

assign or_ln74_3_fu_307_p3 = {{trunc_ln35_8_fu_255_p1}, {lshr_ln35_3_fu_245_p4}};

assign or_ln_fu_283_p3 = {{trunc_ln35_fu_199_p1}, {lshr_ln_fu_189_p4}};

assign t_3_fu_178_p2 = (ap_sig_allocacmp_t + 7'd1);

assign trunc_ln35_6_fu_213_p1 = W_q2[17:0];

assign trunc_ln35_7_fu_241_p1 = W_q1[16:0];

assign trunc_ln35_8_fu_255_p1 = W_q1[18:0];

assign trunc_ln35_fu_199_p1 = W_q2[6:0];

assign trunc_ln70_fu_141_p1 = ap_sig_allocacmp_t[5:0];

assign xor_ln74_1_fu_321_p2 = (xor_ln74_fu_315_p2 ^ or_ln_fu_283_p3);

assign xor_ln74_2_fu_327_p2 = (zext_ln73_1_fu_269_p1 ^ or_ln74_3_fu_307_p3);

assign xor_ln74_3_fu_333_p2 = (xor_ln74_2_fu_327_p2 ^ or_ln74_2_fu_299_p3);

assign xor_ln74_fu_315_p2 = (zext_ln72_1_fu_227_p1 ^ or_ln74_1_fu_291_p3);

assign zext_ln70_fu_355_p1 = t_reg_366_pp0_iter1_reg;

assign zext_ln72_1_fu_227_p1 = lshr_ln1_fu_217_p4;

assign zext_ln72_fu_151_p1 = add_ln72_fu_145_p2;

assign zext_ln73_1_fu_269_p1 = lshr_ln2_fu_259_p4;

assign zext_ln73_fu_162_p1 = add_ln73_fu_156_p2;

assign zext_ln74_1_fu_278_p1 = add_ln74_1_fu_273_p2;

assign zext_ln74_fu_173_p1 = add_ln74_fu_167_p2;

endmodule //cow_dps_SHA256_Pipeline_VITIS_LOOP_70_3
