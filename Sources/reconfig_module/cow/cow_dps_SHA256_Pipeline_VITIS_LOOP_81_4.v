// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cow_dps_SHA256_Pipeline_VITIS_LOOP_81_4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        h,
        a,
        b,
        c,
        d,
        e,
        f,
        g,
        W_address0,
        W_ce0,
        W_q0,
        h_1_out,
        h_1_out_ap_vld,
        a_3_out,
        a_3_out_ap_vld,
        b_3_out,
        b_3_out_ap_vld,
        c_3_out,
        c_3_out_ap_vld,
        d_1_out,
        d_1_out_ap_vld,
        e_3_out,
        e_3_out_ap_vld,
        f_3_out,
        f_3_out_ap_vld,
        g_3_out,
        g_3_out_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] h;
input  [31:0] a;
input  [31:0] b;
input  [31:0] c;
input  [31:0] d;
input  [31:0] e;
input  [31:0] f;
input  [31:0] g;
output  [5:0] W_address0;
output   W_ce0;
input  [31:0] W_q0;
output  [31:0] h_1_out;
output   h_1_out_ap_vld;
output  [31:0] a_3_out;
output   a_3_out_ap_vld;
output  [31:0] b_3_out;
output   b_3_out_ap_vld;
output  [31:0] c_3_out;
output   c_3_out_ap_vld;
output  [31:0] d_1_out;
output   d_1_out_ap_vld;
output  [31:0] e_3_out;
output   e_3_out_ap_vld;
output  [31:0] f_3_out;
output   f_3_out_ap_vld;
output  [31:0] g_3_out;
output   g_3_out_ap_vld;

reg ap_idle;
reg W_ce0;
reg h_1_out_ap_vld;
reg a_3_out_ap_vld;
reg b_3_out_ap_vld;
reg c_3_out_ap_vld;
reg d_1_out_ap_vld;
reg e_3_out_ap_vld;
reg f_3_out_ap_vld;
reg g_3_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln81_fu_318_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] K_address0;
reg    K_ce0;
wire   [31:0] K_q0;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln81_reg_729;
reg   [0:0] icmp_ln81_reg_729_pp0_iter1_reg;
wire   [31:0] add_ln83_2_fu_350_p2;
reg   [31:0] add_ln83_2_reg_743;
wire   [63:0] zext_ln81_fu_330_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] d_1_fu_104;
wire    ap_loop_init;
reg   [31:0] h_1_fu_108;
reg   [31:0] ap_sig_allocacmp_h_1_load;
reg   [6:0] t_fu_112;
wire   [6:0] t_2_fu_324_p2;
reg   [6:0] ap_sig_allocacmp_t_1;
reg   [31:0] h_2_fu_116;
reg   [31:0] g_1_fu_120;
reg   [31:0] f_1_fu_124;
wire   [31:0] e_2_fu_538_p2;
reg   [31:0] d_2_fu_128;
reg   [31:0] c_1_fu_132;
reg   [31:0] b_1_fu_136;
wire   [31:0] a_2_fu_610_p2;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] add_ln83_fu_344_p2;
wire   [5:0] trunc_ln35_fu_393_p1;
wire   [25:0] lshr_ln35_4_fu_383_p4;
wire   [10:0] trunc_ln35_1_fu_407_p1;
wire   [20:0] lshr_ln35_5_fu_397_p4;
wire   [31:0] xor_ln83_fu_425_p2;
wire   [24:0] trunc_ln35_2_fu_421_p1;
wire   [6:0] lshr_ln35_6_fu_411_p4;
wire   [31:0] and_ln83_1_fu_453_p2;
wire   [31:0] and_ln83_fu_447_p2;
wire   [31:0] or_ln1_fu_431_p3;
wire   [31:0] or_ln83_1_fu_439_p3;
wire   [31:0] xor_ln83_2_fu_473_p2;
wire   [31:0] or_ln83_2_fu_459_p3;
wire   [31:0] xor_ln83_3_fu_479_p2;
wire   [31:0] xor_ln83_1_fu_467_p2;
wire   [31:0] add_ln83_1_fu_485_p2;
wire   [31:0] T1_fu_491_p2;
wire   [31:0] xor_ln92_fu_544_p2;
wire   [1:0] trunc_ln35_3_fu_506_p1;
wire   [29:0] lshr_ln35_7_fu_496_p4;
wire   [12:0] trunc_ln35_4_fu_520_p1;
wire   [18:0] lshr_ln35_8_fu_510_p4;
wire   [31:0] and_ln92_fu_550_p2;
wire   [31:0] and_ln92_1_fu_556_p2;
wire   [21:0] trunc_ln35_5_fu_534_p1;
wire   [9:0] lshr_ln35_9_fu_524_p4;
wire   [31:0] or_ln2_fu_562_p3;
wire   [31:0] or_ln92_1_fu_570_p3;
wire   [31:0] xor_ln92_2_fu_592_p2;
wire   [31:0] or_ln92_2_fu_584_p3;
wire   [31:0] xor_ln92_3_fu_598_p2;
wire   [31:0] add_ln92_fu_604_p2;
wire   [31:0] xor_ln92_1_fu_578_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cow_dps_SHA256_Pipeline_VITIS_LOOP_81_4_K_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
K_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(K_address0),
    .ce0(K_ce0),
    .q0(K_q0)
);

cow_dps_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_exit_ready_pp0_iter1_reg == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            b_1_fu_136 <= a;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd0))) begin
            b_1_fu_136 <= a_2_fu_610_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            c_1_fu_132 <= b;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd0))) begin
            c_1_fu_132 <= b_1_fu_136;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            d_1_fu_104 <= d;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd0))) begin
            d_1_fu_104 <= d_2_fu_128;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            d_2_fu_128 <= c;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd0))) begin
            d_2_fu_128 <= c_1_fu_132;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            f_1_fu_124 <= e;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd0))) begin
            f_1_fu_124 <= e_2_fu_538_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            g_1_fu_120 <= f;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd0))) begin
            g_1_fu_120 <= f_1_fu_124;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            h_1_fu_108 <= h;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd0))) begin
            h_1_fu_108 <= h_2_fu_116;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            h_2_fu_116 <= g;
        end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd0))) begin
            h_2_fu_116 <= g_1_fu_120;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln81_fu_318_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            t_fu_112 <= t_2_fu_324_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            t_fu_112 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln81_reg_729 == 1'd0))) begin
        add_ln83_2_reg_743 <= add_ln83_2_fu_350_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        icmp_ln81_reg_729 <= icmp_ln81_fu_318_p2;
        icmp_ln81_reg_729_pp0_iter1_reg <= icmp_ln81_reg_729;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        K_ce0 = 1'b1;
    end else begin
        K_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_ce0 = 1'b1;
    end else begin
        W_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd1))) begin
        a_3_out_ap_vld = 1'b1;
    end else begin
        a_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln81_fu_318_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd0))) begin
        ap_sig_allocacmp_h_1_load = h_2_fu_116;
    end else begin
        ap_sig_allocacmp_h_1_load = h_1_fu_108;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_1 = 7'd0;
    end else begin
        ap_sig_allocacmp_t_1 = t_fu_112;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd1))) begin
        b_3_out_ap_vld = 1'b1;
    end else begin
        b_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd1))) begin
        c_3_out_ap_vld = 1'b1;
    end else begin
        c_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd1))) begin
        d_1_out_ap_vld = 1'b1;
    end else begin
        d_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd1))) begin
        e_3_out_ap_vld = 1'b1;
    end else begin
        e_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd1))) begin
        f_3_out_ap_vld = 1'b1;
    end else begin
        f_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd1))) begin
        g_3_out_ap_vld = 1'b1;
    end else begin
        g_3_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln81_reg_729_pp0_iter1_reg == 1'd1))) begin
        h_1_out_ap_vld = 1'b1;
    end else begin
        h_1_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign K_address0 = zext_ln81_fu_330_p1;

assign T1_fu_491_p2 = (add_ln83_2_reg_743 + add_ln83_1_fu_485_p2);

assign W_address0 = zext_ln81_fu_330_p1;

assign a_2_fu_610_p2 = (add_ln92_fu_604_p2 + xor_ln92_1_fu_578_p2);

assign a_3_out = b_1_fu_136;

assign add_ln83_1_fu_485_p2 = (xor_ln83_3_fu_479_p2 + xor_ln83_1_fu_467_p2);

assign add_ln83_2_fu_350_p2 = (ap_sig_allocacmp_h_1_load + add_ln83_fu_344_p2);

assign add_ln83_fu_344_p2 = (K_q0 + W_q0);

assign add_ln92_fu_604_p2 = (T1_fu_491_p2 + xor_ln92_3_fu_598_p2);

assign and_ln83_1_fu_453_p2 = (xor_ln83_fu_425_p2 & h_2_fu_116);

assign and_ln83_fu_447_p2 = (g_1_fu_120 & f_1_fu_124);

assign and_ln92_1_fu_556_p2 = (d_2_fu_128 & c_1_fu_132);

assign and_ln92_fu_550_p2 = (xor_ln92_fu_544_p2 & b_1_fu_136);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign b_3_out = c_1_fu_132;

assign c_3_out = d_2_fu_128;

assign d_1_out = d_1_fu_104;

assign e_2_fu_538_p2 = (T1_fu_491_p2 + d_1_fu_104);

assign e_3_out = f_1_fu_124;

assign f_3_out = g_1_fu_120;

assign g_3_out = h_2_fu_116;

assign h_1_out = h_1_fu_108;

assign icmp_ln81_fu_318_p2 = ((ap_sig_allocacmp_t_1 == 7'd64) ? 1'b1 : 1'b0);

assign lshr_ln35_4_fu_383_p4 = {{f_1_fu_124[31:6]}};

assign lshr_ln35_5_fu_397_p4 = {{f_1_fu_124[31:11]}};

assign lshr_ln35_6_fu_411_p4 = {{f_1_fu_124[31:25]}};

assign lshr_ln35_7_fu_496_p4 = {{b_1_fu_136[31:2]}};

assign lshr_ln35_8_fu_510_p4 = {{b_1_fu_136[31:13]}};

assign lshr_ln35_9_fu_524_p4 = {{b_1_fu_136[31:22]}};

assign or_ln1_fu_431_p3 = {{trunc_ln35_fu_393_p1}, {lshr_ln35_4_fu_383_p4}};

assign or_ln2_fu_562_p3 = {{trunc_ln35_3_fu_506_p1}, {lshr_ln35_7_fu_496_p4}};

assign or_ln83_1_fu_439_p3 = {{trunc_ln35_1_fu_407_p1}, {lshr_ln35_5_fu_397_p4}};

assign or_ln83_2_fu_459_p3 = {{trunc_ln35_2_fu_421_p1}, {lshr_ln35_6_fu_411_p4}};

assign or_ln92_1_fu_570_p3 = {{trunc_ln35_4_fu_520_p1}, {lshr_ln35_8_fu_510_p4}};

assign or_ln92_2_fu_584_p3 = {{trunc_ln35_5_fu_534_p1}, {lshr_ln35_9_fu_524_p4}};

assign t_2_fu_324_p2 = (ap_sig_allocacmp_t_1 + 7'd1);

assign trunc_ln35_1_fu_407_p1 = f_1_fu_124[10:0];

assign trunc_ln35_2_fu_421_p1 = f_1_fu_124[24:0];

assign trunc_ln35_3_fu_506_p1 = b_1_fu_136[1:0];

assign trunc_ln35_4_fu_520_p1 = b_1_fu_136[12:0];

assign trunc_ln35_5_fu_534_p1 = b_1_fu_136[21:0];

assign trunc_ln35_fu_393_p1 = f_1_fu_124[5:0];

assign xor_ln83_1_fu_467_p2 = (and_ln83_fu_447_p2 ^ and_ln83_1_fu_453_p2);

assign xor_ln83_2_fu_473_p2 = (or_ln83_1_fu_439_p3 ^ or_ln1_fu_431_p3);

assign xor_ln83_3_fu_479_p2 = (xor_ln83_2_fu_473_p2 ^ or_ln83_2_fu_459_p3);

assign xor_ln83_fu_425_p2 = (f_1_fu_124 ^ 32'd4294967295);

assign xor_ln92_1_fu_578_p2 = (and_ln92_fu_550_p2 ^ and_ln92_1_fu_556_p2);

assign xor_ln92_2_fu_592_p2 = (or_ln92_1_fu_570_p3 ^ or_ln2_fu_562_p3);

assign xor_ln92_3_fu_598_p2 = (xor_ln92_2_fu_592_p2 ^ or_ln92_2_fu_584_p3);

assign xor_ln92_fu_544_p2 = (d_2_fu_128 ^ c_1_fu_132);

assign zext_ln81_fu_330_p1 = ap_sig_allocacmp_t_1;

endmodule //cow_dps_SHA256_Pipeline_VITIS_LOOP_81_4
