// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cow_dps_cow_dps,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7vx485t-ffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.046000,HLS_SYN_LAT=8723,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=0,HLS_SYN_FF=1864,HLS_SYN_LUT=6019,HLS_VERSION=2023_1}" *)

module cow_dps (
        ap_clk,
        ap_rst_n,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 13;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] siftedKey_q0;
wire   [7:0] privacyAmplifiedKey_address0;
reg    privacyAmplifiedKey_ce0;
reg    privacyAmplifiedKey_we0;
wire   [31:0] privacyAmplifiedKey_d0;
reg   [2:0] i_reg_256;
wire    ap_CS_fsm_state3;
wire   [2:0] add_ln129_fu_167_p2;
reg   [2:0] add_ln129_reg_264;
wire   [5:0] add_ln136_fu_179_p2;
reg   [5:0] add_ln136_reg_272;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln136_fu_173_p2;
wire   [7:0] seed_q0;
reg   [4:0] hash_i_address0;
reg    hash_i_ce0;
reg    hash_i_we0;
wire   [7:0] hash_i_q0;
reg    hash_i_ce1;
reg    hash_i_we1;
wire    grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_start;
wire    grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_done;
wire    grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_idle;
wire    grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_ready;
wire   [8:0] grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_errorCorrectedKey_address0;
wire    grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_errorCorrectedKey_ce0;
wire    grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_errorCorrectedKey_we0;
wire   [31:0] grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_errorCorrectedKey_d0;
wire   [8:0] grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_siftedKey_address0;
wire    grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_siftedKey_ce0;
wire    grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_siftedKey_we0;
wire   [31:0] grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_siftedKey_d0;
wire    grp_SHA256_fu_143_ap_start;
wire    grp_SHA256_fu_143_ap_done;
wire    grp_SHA256_fu_143_ap_idle;
wire    grp_SHA256_fu_143_ap_ready;
wire   [4:0] grp_SHA256_fu_143_message_address0;
wire    grp_SHA256_fu_143_message_ce0;
wire   [4:0] grp_SHA256_fu_143_digest_address0;
wire    grp_SHA256_fu_143_digest_ce0;
wire    grp_SHA256_fu_143_digest_we0;
wire   [7:0] grp_SHA256_fu_143_digest_d0;
wire   [4:0] grp_SHA256_fu_143_digest_address1;
wire    grp_SHA256_fu_143_digest_ce1;
wire    grp_SHA256_fu_143_digest_we1;
wire   [7:0] grp_SHA256_fu_143_digest_d1;
reg   [5:0] j_reg_123;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state4;
reg    grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_start_reg;
wire    ap_CS_fsm_state2;
reg    grp_SHA256_fu_143_ap_start_reg;
wire   [0:0] icmp_ln129_fu_161_p2;
wire   [63:0] zext_ln137_fu_195_p1;
wire   [63:0] zext_ln137_2_fu_244_p1;
reg   [2:0] i_1_fu_86;
wire   [1:0] div_i_udiv_fu_185_p4;
wire   [2:0] empty_22_fu_208_p1;
wire   [2:0] xor_ln137_fu_212_p2;
wire   [7:0] zext_ln137_1_fu_218_p1;
wire   [7:0] lshr_ln137_fu_222_p2;
wire   [0:0] trunc_ln137_fu_228_p1;
wire   [4:0] empty_fu_204_p1;
wire   [7:0] add_ln_fu_237_p3;
reg   [5:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
reg    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
wire    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ce_reg;
wire   [63:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_start_reg = 1'b0;
#0 grp_SHA256_fu_143_ap_start_reg = 1'b0;
end

cow_dps_seed_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
seed_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(grp_SHA256_fu_143_message_address0),
    .ce0(grp_SHA256_fu_143_message_ce0),
    .q0(seed_q0)
);

cow_dps_hash_i_RAM_AUTO_1R1W #(
    .DataWidth( 8 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
hash_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(hash_i_address0),
    .ce0(hash_i_ce0),
    .we0(hash_i_we0),
    .d0(grp_SHA256_fu_143_digest_d0),
    .q0(hash_i_q0),
    .address1(grp_SHA256_fu_143_digest_address1),
    .ce1(hash_i_ce1),
    .we1(hash_i_we1),
    .d1(grp_SHA256_fu_143_digest_d1)
);

cow_dps_cow_dps_Pipeline_VITIS_LOOP_153_1 grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_start),
    .ap_done(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_done),
    .ap_idle(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_idle),
    .ap_ready(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_ready),
    .errorCorrectedKey_address0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_errorCorrectedKey_address0),
    .errorCorrectedKey_ce0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_errorCorrectedKey_ce0),
    .errorCorrectedKey_we0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_errorCorrectedKey_we0),
    .errorCorrectedKey_d0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_errorCorrectedKey_d0),
    .siftedKey_address0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_siftedKey_address0),
    .siftedKey_ce0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_siftedKey_ce0),
    .siftedKey_we0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_siftedKey_we0),
    .siftedKey_d0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_siftedKey_d0),
    .siftedKey_q0(siftedKey_q0)
);

cow_dps_SHA256 grp_SHA256_fu_143(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_SHA256_fu_143_ap_start),
    .ap_done(grp_SHA256_fu_143_ap_done),
    .ap_idle(grp_SHA256_fu_143_ap_idle),
    .ap_ready(grp_SHA256_fu_143_ap_ready),
    .message_address0(grp_SHA256_fu_143_message_address0),
    .message_ce0(grp_SHA256_fu_143_message_ce0),
    .message_q0(seed_q0),
    .digest_address0(grp_SHA256_fu_143_digest_address0),
    .digest_ce0(grp_SHA256_fu_143_digest_ce0),
    .digest_we0(grp_SHA256_fu_143_digest_we0),
    .digest_d0(grp_SHA256_fu_143_digest_d0),
    .digest_address1(grp_SHA256_fu_143_digest_address1),
    .digest_ce1(grp_SHA256_fu_143_digest_ce1),
    .digest_we1(grp_SHA256_fu_143_digest_we1),
    .digest_d1(grp_SHA256_fu_143_digest_d1)
);

cow_dps_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(64'd0),
    .privacyAmplifiedKey_address0(privacyAmplifiedKey_address0),
    .privacyAmplifiedKey_ce0(privacyAmplifiedKey_ce0),
    .privacyAmplifiedKey_we0(privacyAmplifiedKey_we0),
    .privacyAmplifiedKey_d0(privacyAmplifiedKey_d0),
    .siftedKey_address0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_siftedKey_address0),
    .siftedKey_ce0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_siftedKey_ce0),
    .siftedKey_we0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_siftedKey_we0),
    .siftedKey_d0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_siftedKey_d0),
    .siftedKey_q0(siftedKey_q0),
    .errorCorrectedKey_address0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_errorCorrectedKey_address0),
    .errorCorrectedKey_ce0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_errorCorrectedKey_ce0),
    .errorCorrectedKey_we0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_errorCorrectedKey_we0),
    .errorCorrectedKey_d0(grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_errorCorrectedKey_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_SHA256_fu_143_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln129_fu_161_p2 == 1'd0))) begin
            grp_SHA256_fu_143_ap_start_reg <= 1'b1;
        end else if ((grp_SHA256_fu_143_ap_ready == 1'b1)) begin
            grp_SHA256_fu_143_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_start_reg <= 1'b1;
        end else if ((grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_ready == 1'b1)) begin
            grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_1_fu_86 <= 3'd0;
    end else if (((icmp_ln136_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_fu_86 <= add_ln129_reg_264;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (grp_SHA256_fu_143_ap_done == 1'b1))) begin
        j_reg_123 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        j_reg_123 <= add_ln136_reg_272;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln129_reg_264 <= add_ln129_fu_167_p2;
        i_reg_256 <= i_1_fu_86;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln136_reg_272 <= add_ln136_fu_179_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_done == 1'b0)) begin
        ap_ST_fsm_state2_blk = 1'b1;
    end else begin
        ap_ST_fsm_state2_blk = 1'b0;
    end
end

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((grp_SHA256_fu_143_ap_done == 1'b0)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

assign ap_ST_fsm_state5_blk = 1'b0;

assign ap_ST_fsm_state6_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln129_fu_161_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln129_fu_161_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        hash_i_address0 = zext_ln137_fu_195_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hash_i_address0 = grp_SHA256_fu_143_digest_address0;
    end else begin
        hash_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        hash_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        hash_i_ce0 = grp_SHA256_fu_143_digest_ce0;
    end else begin
        hash_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        hash_i_ce1 = grp_SHA256_fu_143_digest_ce1;
    end else begin
        hash_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        hash_i_we0 = grp_SHA256_fu_143_digest_we0;
    end else begin
        hash_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        hash_i_we1 = grp_SHA256_fu_143_digest_we1;
    end else begin
        hash_i_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        privacyAmplifiedKey_ce0 = 1'b1;
    end else begin
        privacyAmplifiedKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        privacyAmplifiedKey_we0 = 1'b1;
    end else begin
        privacyAmplifiedKey_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln129_fu_161_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_SHA256_fu_143_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln136_fu_173_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln129_fu_167_p2 = (i_1_fu_86 + 3'd1);

assign add_ln136_fu_179_p2 = (j_reg_123 + 6'd1);

assign add_ln_fu_237_p3 = {{i_reg_256}, {empty_fu_204_p1}};

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign div_i_udiv_fu_185_p4 = {{j_reg_123[4:3]}};

assign empty_22_fu_208_p1 = j_reg_123[2:0];

assign empty_fu_204_p1 = j_reg_123[4:0];

assign grp_SHA256_fu_143_ap_start = grp_SHA256_fu_143_ap_start_reg;

assign grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_start = grp_cow_dps_Pipeline_VITIS_LOOP_153_1_fu_135_ap_start_reg;

assign icmp_ln129_fu_161_p2 = ((i_1_fu_86 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln136_fu_173_p2 = ((j_reg_123 == 6'd32) ? 1'b1 : 1'b0);

assign lshr_ln137_fu_222_p2 = hash_i_q0 >> zext_ln137_1_fu_218_p1;

assign privacyAmplifiedKey_address0 = zext_ln137_2_fu_244_p1;

assign privacyAmplifiedKey_d0 = trunc_ln137_fu_228_p1;

assign trunc_ln137_fu_228_p1 = lshr_ln137_fu_222_p2[0:0];

assign xor_ln137_fu_212_p2 = (empty_22_fu_208_p1 ^ 3'd7);

assign zext_ln137_1_fu_218_p1 = xor_ln137_fu_212_p2;

assign zext_ln137_2_fu_244_p1 = add_ln_fu_237_p3;

assign zext_ln137_fu_195_p1 = div_i_udiv_fu_185_p4;

endmodule //cow_dps
