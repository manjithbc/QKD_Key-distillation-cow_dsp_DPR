// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cow_dps_SHA256_Pipeline_VITIS_LOOP_62_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        paddedMessage_address0,
        paddedMessage_ce0,
        paddedMessage_q0,
        paddedMessage_address1,
        paddedMessage_ce1,
        paddedMessage_q1,
        paddedMessage_address2,
        paddedMessage_ce2,
        paddedMessage_q2,
        paddedMessage_address3,
        paddedMessage_ce3,
        paddedMessage_q3,
        W_address0,
        W_ce0,
        W_we0,
        W_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [5:0] paddedMessage_address0;
output   paddedMessage_ce0;
input  [7:0] paddedMessage_q0;
output  [5:0] paddedMessage_address1;
output   paddedMessage_ce1;
input  [7:0] paddedMessage_q1;
output  [5:0] paddedMessage_address2;
output   paddedMessage_ce2;
input  [7:0] paddedMessage_q2;
output  [5:0] paddedMessage_address3;
output   paddedMessage_ce3;
input  [7:0] paddedMessage_q3;
output  [5:0] W_address0;
output   W_ce0;
output   W_we0;
output  [31:0] W_d0;

reg ap_idle;
reg paddedMessage_ce0;
reg paddedMessage_ce1;
reg paddedMessage_ce2;
reg paddedMessage_ce3;
reg W_ce0;
reg W_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln62_fu_116_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg   [4:0] t_4_reg_207;
wire    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln68_fu_140_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln68_1_fu_151_p1;
wire   [63:0] zext_ln69_fu_162_p1;
wire   [63:0] zext_ln69_1_fu_173_p1;
wire   [63:0] zext_ln62_fu_183_p1;
reg   [4:0] t_fu_42;
wire   [4:0] t_5_fu_122_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_t_4;
wire   [3:0] trunc_ln68_fu_128_p1;
wire   [5:0] shl_ln_fu_132_p3;
wire   [5:0] or_ln68_fu_145_p2;
wire   [5:0] or_ln69_fu_156_p2;
wire   [5:0] or_ln69_1_fu_167_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

cow_dps_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln62_fu_116_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            t_fu_42 <= t_5_fu_122_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            t_fu_42 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        t_4_reg_207 <= ap_sig_allocacmp_t_4;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_ce0 = 1'b1;
    end else begin
        W_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        W_we0 = 1'b1;
    end else begin
        W_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln62_fu_116_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_t_4 = 5'd0;
    end else begin
        ap_sig_allocacmp_t_4 = t_fu_42;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        paddedMessage_ce0 = 1'b1;
    end else begin
        paddedMessage_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        paddedMessage_ce1 = 1'b1;
    end else begin
        paddedMessage_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        paddedMessage_ce2 = 1'b1;
    end else begin
        paddedMessage_ce2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        paddedMessage_ce3 = 1'b1;
    end else begin
        paddedMessage_ce3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign W_address0 = zext_ln62_fu_183_p1;

assign W_d0 = {{{{paddedMessage_q3}, {paddedMessage_q2}}, {paddedMessage_q1}}, {paddedMessage_q0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln62_fu_116_p2 = ((ap_sig_allocacmp_t_4 == 5'd16) ? 1'b1 : 1'b0);

assign or_ln68_fu_145_p2 = (shl_ln_fu_132_p3 | 6'd1);

assign or_ln69_1_fu_167_p2 = (shl_ln_fu_132_p3 | 6'd3);

assign or_ln69_fu_156_p2 = (shl_ln_fu_132_p3 | 6'd2);

assign paddedMessage_address0 = zext_ln69_1_fu_173_p1;

assign paddedMessage_address1 = zext_ln69_fu_162_p1;

assign paddedMessage_address2 = zext_ln68_1_fu_151_p1;

assign paddedMessage_address3 = zext_ln68_fu_140_p1;

assign shl_ln_fu_132_p3 = {{trunc_ln68_fu_128_p1}, {2'd0}};

assign t_5_fu_122_p2 = (ap_sig_allocacmp_t_4 + 5'd1);

assign trunc_ln68_fu_128_p1 = ap_sig_allocacmp_t_4[3:0];

assign zext_ln62_fu_183_p1 = t_4_reg_207;

assign zext_ln68_1_fu_151_p1 = or_ln68_fu_145_p2;

assign zext_ln68_fu_140_p1 = shl_ln_fu_132_p3;

assign zext_ln69_1_fu_173_p1 = or_ln69_1_fu_167_p2;

assign zext_ln69_fu_162_p1 = or_ln69_fu_156_p2;

endmodule //cow_dps_SHA256_Pipeline_VITIS_LOOP_62_2
